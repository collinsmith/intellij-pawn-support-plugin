package net.alliedmods.lang.amxxpawn.psi;

import com.intellij.psi.tree.TokenSet;

import static net.alliedmods.lang.amxxpawn.lexer.ApTokenTypes.*;

public interface ElementTypes {
  TokenSet OVERLOADABLE_OPERATIONS = TokenSet.create(
      PLUS, MINUS, ASTERISK, DIV, PERC, GT, LT, EXCL, TILDE, EQ, PLUSPLUS, MINUSMINUS, EQEQ, NE,
      LE, GE);

  TokenSet DECL_BIT_SET = TokenSet.create(
      NEW_KEYWORD, STATIC_KEYWORD, PUBLIC_KEYWORD, STOCK_KEYWORD);

  TokenSet MODIFIER_BIT_SET = TokenSet.create(
      CONST_KEYWORD, STOCK_KEYWORD, STATIC_KEYWORD, PUBLIC_KEYWORD);

  TokenSet CLASS_KEYWORD_BIT_SET = TokenSet.create(
      ENUM_KEYWORD);

  TokenSet AMXX_TERM = TokenSet.create(SEMICOLON, SEMICOLON_SYNTHETIC);

  TokenSet AMXX_WHITESPACE_BIT_SET = TokenSet.create(WHITE_SPACE);

  TokenSet AMXX_PLAIN_COMMENT_BIT_SET = TokenSet.create(END_OF_LINE_COMMENT, C_STYLE_COMMENT);

  TokenSet AMXX_COMMENT_BIT_SET = TokenSet.orSet(
      AMXX_PLAIN_COMMENT_BIT_SET, TokenSet.create(DOC_COMMENT));

  TokenSet AMXX_COMMENT_OR_WHITESPACE_BIT_SET = TokenSet.orSet(
      AMXX_WHITESPACE_BIT_SET, AMXX_COMMENT_BIT_SET);

  TokenSet KEYWORD_BIT_SET = TokenSet.create(
      ASSERT_KEYWORD, BREAK_KEYWORD, CASE_KEYWORD, CHAR_KEYWORD, CONST_KEYWORD, CONTINUE_KEYWORD,
      DEFAULT_KEYWORD, /*DEFINED_KEYWORD, */DO_KEYWORD, ELSE_KEYWORD, ENUM_KEYWORD, EXIT_KEYWORD,
      FOR_KEYWORD, FORWARD_KEYWORD, GOTO_KEYWORD, IF_KEYWORD, NATIVE_KEYWORD, NEW_KEYWORD,
      OPERATOR_KEYWORD, PUBLIC_KEYWORD, RETURN_KEYWORD, SIZEOF_KEYWORD, SLEEP_KEYWORD,
      STATE_KEYWORD, STATIC_KEYWORD, STOCK_KEYWORD, SWITCH_KEYWORD, TAGOF_KEYWORD, WHILE_KEYWORD);

  TokenSet LITERAL_BIT_SET = TokenSet.create(TRUE_KEYWORD, FALSE_KEYWORD);

  TokenSet OPERATION_BIT_SET = TokenSet.create(
      EQ, GT, LT, EXCL, TILDE, QUEST, COLON, PLUS, MINUS, ASTERISK, DIV, AND, OR, XOR, PERC, EQEQ,
      LE, GE, NE, ANDAND, OROR, PLUSPLUS, MINUSMINUS, LTLT, GTGT, GTGTGT, PLUSEQ, MINUSEQ,
      ASTERISKEQ, DIVEQ, ANDEQ, OREQ, XOREQ, PERCEQ, LTLTEQ, GTGTEQ, GTGTGTEQ);

  TokenSet AMXX_STRING_LITERAL_BIT_SET = TokenSet.create(
      CHARACTER_LITERAL, STRING_LITERAL, RAW_STRING_LITERAL, PACKED_STRING_LITERAL,
      PACKED_RAW_STRING_LITERAL);

  TokenSet AMXX_PREPROCESSOR_BIT_SET = TokenSet.create(
      HASH, ESCAPING_SLASH,
      INCLUDE_DIRECTIVE, TRYINCLUDE_DIRECTIVE,
      ASSERT_DIRECTIVE, DEFINE_DIRECTIVE, ELSE_DIRECTIVE, ELSEIF_DIRECTIVE, EMIT_DIRECTIVE,
      ENDIF_DIRECTIVE, ENDINPUT_DIRECTIVE, ENDSCRIPT_DIRECTIVE, ERROR_DIRECTIVE, FILE_DIRECTIVE,
      IF_DIRECTIVE, LINE_DIRECTIVE, PRAGMA_DIRECTIVE, UNDEF_DIRECTIVE,
      PRAGMA_IDENTIFIER,
      DEFINED_KEYWORD);

  TokenSet AMXX_INCLUDE_KEYWORDS = TokenSet.create(INCLUDE_DIRECTIVE, TRYINCLUDE_DIRECTIVE);
}
